{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","timepicker/timepicker.js","tooltip/tooltip.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","button/button.js","collapse/collapse.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","contentTemplateUrl","console","contentTemplate","titleTemplateUrl","titleTemplate","controllerAs","resolve","angular","copy","locals","transformTemplate","bindToController","key","controller","isString","value","$injector","invoke","identity","extend","$template","$contentTemplate","$titleTemplate","templateEl","outerHTML","$q","when","Error","all","templates","contentEl","findElement","removeAttr","remove","html","replace","next","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","length","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","isKeyDownAttached","isUndefined","$element","on","hide","$onKeyDown","off","$$phase","$root","TypeaheadFactory","array","isFunction","$filter","expression","directive","results","postLink","attr","restrict","forEach","require","falseValueRegExp","isDefined","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$setViewValue","$viewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","focus","_init","init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","keep","Date","setHours","setMinutes","setSeconds","midIndex","parseInt","hours","disabled","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","target","nodeName","targetEl","triggerHandler","isTouch","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","_show","_hide","blur","$options","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","placement","title","type","autoClose","bsEnabled","viewport","selector","padding","TooltipFactory","$new","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","destroyTipElement","triggers","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","setOffset","using","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$promise","$bsCompiler","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","tipContainer","bindTriggerEvents","isElement","parent","after","lastChild","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","leave","_blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$getIndex","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","customClass","display","minor","backdropAnimation","bindBackdropEvents","defaultPrevented","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","bind","toggleEvent","toggleClass","$eval","v","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          // Navigate with keyboard\r\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        var isKeyDownAttached = false;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard && !isKeyDownAttached) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n                 isKeyDownAttached = true;\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n            isKeyDownAttached = false;\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n\r\n          var parent;\r\n          var after;\r\n\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options or direct object\r\n        forEach([ 'title', 'content' ], function(key) {\r\n          if (options[key])\r\n               scope[key] = angular.isString(options[key]) ? $sce.trustAsHtml(options[key]) : options[key];\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\r\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of modals\r\n            backdropCount--;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var contentTemplateUrl = options.contentTemplateUrl;\r\n    var contentTemplate = options.contentTemplate || '';\r\n    var titleTemplateUrl = options.titleTemplateUrl;\r\n    var titleTemplate = options.titleTemplate || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template)\r\n      resolve.$template = $q.when(template);\r\n    else if (templateUrl)\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    else\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n\r\n    if (contentTemplate)\r\n      resolve.$contentTemplate = $q.when(contentTemplate);\r\n    else if (contentTemplateUrl)\r\n      resolve.$contentTemplate = fetchTemplate(contentTemplateUrl);\r\n\r\n    if (titleTemplate)\r\n      resolve.$titleTemplate = $q.when(contentTemplate);\r\n    else if (titleTemplateUrl)\r\n      resolve.$titleTemplate = fetchTemplate(contentTemplateUrl);\r\n\r\n    if (resolve.$titleTemplate)\r\n      resolve.$template = $q.all([resolve.$template, resolve.$titleTemplate])\r\n      .then(function(templates) {\r\n        var templateEl = angular.element(templates[0]);\r\n        findElement('[ng-bind=\"title\"]', templateEl[0])\r\n          .removeAttr('ng-bind')\r\n          .html(templates[1]);\r\n        return templateEl[0].outerHTML;\r\n      });\r\n\r\n    if (resolve.$contentTemplate)\r\n      resolve.$template = $q.all([resolve.$template, resolve.$contentTemplate])\r\n      .then(function(templates) {\r\n        var templateEl = angular.element(templates[0]);\r\n        var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n          .removeAttr('ng-bind')\r\n          .html(templates[1]);\r\n        // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n        if (!options.templateUrl) contentEl.next().remove();\r\n        return templateEl[0].outerHTML;\r\n      });\r\n      \r\n    // Waitfor all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function () {\r\n          if (!$dropdown.$isShown) return;\r\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {scope: scope};\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function (mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n            } else {\r\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function (blur) {\r\n          if (!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {month: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n            }\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualTime = picker.$date.getTime();\r\n            var newDate;\r\n\r\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {year: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n            }\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {year: 12},\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n            }\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if (!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          // Navigate with keyboard\r\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        var isKeyDownAttached = false;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard && !isKeyDownAttached) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n                 isKeyDownAttached = true;\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n            isKeyDownAttached = false;\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var contentTemplateUrl = options.contentTemplateUrl;\r\n    var contentTemplate = options.contentTemplate || '';\r\n    var titleTemplateUrl = options.titleTemplateUrl;\r\n    var titleTemplate = options.titleTemplate || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = angular.copy(options.resolve || {});\r\n    var locals = angular.copy(options.locals || {});\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template)\r\n      resolve.$template = $q.when(template);\r\n    else if (templateUrl)\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    else\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n\r\n    if (contentTemplate)\r\n      resolve.$contentTemplate = $q.when(contentTemplate);\r\n    else if (contentTemplateUrl)\r\n      resolve.$contentTemplate = fetchTemplate(contentTemplateUrl);\r\n\r\n    if (titleTemplate)\r\n      resolve.$titleTemplate = $q.when(contentTemplate);\r\n    else if (titleTemplateUrl)\r\n      resolve.$titleTemplate = fetchTemplate(contentTemplateUrl);\r\n\r\n    if (resolve.$titleTemplate)\r\n      resolve.$template = $q.all([resolve.$template, resolve.$titleTemplate])\r\n      .then(function(templates) {\r\n        var templateEl = angular.element(templates[0]);\r\n        findElement('[ng-bind=\"title\"]', templateEl[0])\r\n          .removeAttr('ng-bind')\r\n          .html(templates[1]);\r\n        return templateEl[0].outerHTML;\r\n      });\r\n\r\n    if (resolve.$contentTemplate)\r\n      resolve.$template = $q.all([resolve.$template, resolve.$contentTemplate])\r\n      .then(function(templates) {\r\n        var templateEl = angular.element(templates[0]);\r\n        var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n          .removeAttr('ng-bind')\r\n          .html(templates[1]);\r\n        // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n        if (!options.templateUrl) contentEl.next().remove();\r\n        return templateEl[0].outerHTML;\r\n      });\r\n      \r\n    // Waitfor all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function(locals) {\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function () {\r\n          if (!$dropdown.$isShown) return;\r\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {scope: scope};\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n\r\n          var parent;\r\n          var after;\r\n\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        // Support scope as string options or direct object\r\n        forEach([ 'title', 'content' ], function(key) {\r\n          if (options[key])\r\n               scope[key] = angular.isString(options[key]) ? $sce.trustAsHtml(options[key]) : options[key];\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\r\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of modals\r\n            backdropCount--;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          if (evt.which === 27 && $modal.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function (mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n            } else {\r\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function (blur) {\r\n          if (!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {month: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n            }\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualTime = picker.$date.getTime();\r\n            var newDate;\r\n\r\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {year: 1},\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n            }\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {year: 12},\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n            }\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if (!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}