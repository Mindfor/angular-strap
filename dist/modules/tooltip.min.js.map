{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isTouch","TooltipFactory","$tooltip","scope","$scope","options","$rootScope","$new","split","enterAnimateCallback","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","evt","preventDefault","destroyTipElement","element","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$bsCompiler","compile","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","parent","after","lastChild","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","leave","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isString","tooltip","transclusion","falseValueRegExp","key","isDefined","dataTarget","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n\r\n          var parent;\r\n          var after;\r\n\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(tipElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(tipElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}